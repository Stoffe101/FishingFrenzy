plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id 'com.gradleup.shadow' version '8.3.5'
}

group = 'com.example'
version = '1.0.0'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.8-R0.1-SNAPSHOT")
    implementation("net.kyori:adventure-api:4.14.0")
    implementation("net.kyori:adventure-platform-bukkit:4.3.2")
    implementation("net.kyori:adventure-text-minimessage:4.14.0")
}

shadowJar {
    // Ensure the shaded jar replaces the normal output and goes to build/libs
    destinationDirectory = file("$buildDir/libs")
    archiveBaseName.set("FishingFrenzy")
    archiveVersion.set(version)
    archiveClassifier.set("")

    // Include compiled classes and resources from the main source set only
    from(sourceSets.main.output)

    // Relocate Kyori to avoid conflicts
    relocate 'net.kyori.adventure', 'com.example.fishingFrenzy.shaded.adventure'
    relocate 'net.kyori.adventure.platform', 'com.example.fishingFrenzy.shaded.adventure.platform'
    relocate 'net.kyori.adventure.text.minimessage', 'com.example.fishingFrenzy.shaded.adventure.text.minimessage'
}

jar {
    enabled = false
    manifest {
        attributes(
            'Main-Class': 'com.example.fishingFrenzy.FishingFrenzy'
        )
    }
}

tasks.build.dependsOn shadowJar

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    // Exclude Paper plugin descriptor so we act as a Bukkit plugin (YAML commands allowed)
    exclude 'paper-plugin.yml'
    filesMatching('plugin.yml') {
        expand props
    }
}
